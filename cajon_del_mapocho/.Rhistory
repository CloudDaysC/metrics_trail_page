ylab("Elevación (msnm)") +
xlab("Distancia") +
theme_minimal()
ggplot(ruta_strm, aes(distance, ele)) +
geom_line() +
geom_vline( xintercept = PCS) +
geom_rect(aes(xmin=c(0,PCS[-9]), xmax = PCS)) +
ylab("Elevación (msnm)") +
xlab("Distancia") +
theme_minimal()
ggplot() +
geom_rect(aes(xmin=c(0,PCS[-9]), xmax = PCS))
ggplot(ruta_strm, aes(distance, ele)) +
geom_line() +
geom_vline( xintercept = PCS) +
geom_rect(aes(xmin=c(0,PCS[-9]), xmax = PCS, ymin = -Inf, ymax = Inf)) +
ylab("Elevación (msnm)") +
xlab("Distancia") +
theme_minimal()
ggplot() +
geom_rect(aes(xmin=c(0,PCS[-9]), xmax = PCS, ymin = -Inf, ymax = Inf))
c(0,PCS[-9])
PCS
ggplot() +
geom_rect(aes(xmin=c(0,PCS[-9]), xmax = PCS, ymin = -Inf, ymax = Inf, fill=1))
ggplot() +
geom_rect(aes(xmin=c(0,PCS[-9]), xmax = PCS, ymin = -Inf, ymax = Inf, fill="red"))
ggplot() +
geom_rect(aes(xmin=c(0,PCS[-9]), xmax = PCS, ymin = -Inf, ymax = Inf), fill="red")
ggplot() +
geom_line(ruta_strm, aes(distance, ele)) +
geom_rect(aes(xmin=c(0,PCS[-9]), xmax = PCS, ymin = -Inf, ymax = Inf), fill="red")
ggplot() +
geom_line(ruta_strm, aes(distance, ele))
ggplot() +
geom_line(ruta_strm, aes(distance, ele))
ggplot(ruta_strm) +
geom_line(aes(distance, ele)) +
geom_rect(aes(xmin=c(0,PCS[-9]), xmax = PCS, ymin = -Inf, ymax = Inf), fill="red")
ggplot(ruta_strm) +
geom_line(aes(distance, ele)) +
geom_rect(data = 1:9, aes(xmin=c(0,PCS[-9]), xmax = PCS, ymin = -Inf, ymax = Inf), fill="red")
PCSdf <- data.frame("xmin"=c(0,PCS[-9]), "xmax"=PCS, "fill" = brewer.pal(n = 9, name = "Paired"))
View(PCSdf)
ggplot(ruta_strm) +
geom_line(aes(distance, ele)) +
geom_rect(data=PCSdf, aes(xmin=xmin, xmax = xman, ymin = -Inf, ymax = Inf), fill="red")
ggplot(ruta_strm) +
geom_line(aes(distance, ele)) +
geom_rect(data=PCSdf, aes(xmin=xmin, xmax = xmax, ymin = -Inf, ymax = Inf), fill="red")
ggplot() +
geom_line(data =ruta_strm, aes(distance, ele)) +
geom_rect(data=PCSdf, aes(xmin=xmin, xmax = xmax, ymin = -Inf, ymax = Inf), fill="red")
ggplot() +
geom_rect(data=PCSdf, aes(xmin=xmin, xmax = xmax, ymin = -Inf, ymax = Inf), fill="red") +
geom_line(data =ruta_strm, aes(distance, ele))
ggplot() +
geom_rect(data=PCSdf, aes(xmin=xmin, xmax = xmax, ymin = -Inf, ymax = Inf, , fill=fill)) +
geom_line(data =ruta_strm, aes(distance, ele))
ggplot() +
geom_rect(data=PCSdf, aes(xmin=xmin, xmax = xmax, ymin = -Inf, ymax = Inf,fill=fill)) +
geom_line(data =ruta_strm, aes(distance, ele))
ggplot() +
geom_rect(data=PCSdf, aes(xmin=xmin, xmax = xmax, ymin = -Inf, ymax = Inf, fill=fill)) +
geom_line(data =ruta_strm, aes(distance, ele)) +
ylab("Elevación (msnm)") +
xlab("Distancia") +
theme_minimal()
ggplot() +
geom_rect(data=PCSdf, aes(xmin=xmin, xmax = xmax, ymin = -Inf, ymax = Inf, fill=fill), alpha = 0.5) +
geom_line(data =ruta_strm, aes(distance, ele)) +
ylab("Elevación (msnm)") +
xlab("Distancia") +
theme_minimal()
ggplot() +
geom_rect(data=PCSdf, aes(xmin=xmin, xmax = xmax, ymin = -Inf, ymax = Inf, fill=fill), alpha = 0.5) +
geom_line(data =ruta_strm, aes(distance, ele)) +
ylab("Elevación (msnm)") +
xlab("Distancia") +
theme_minimal() +
theme(legend.position = element_blank())
ggplot() +
geom_rect(data=PCSdf, aes(xmin=xmin, xmax = xmax, ymin = -Inf, ymax = Inf, fill=fill), alpha = 0.5) +
geom_line(data =ruta_strm, aes(distance, ele)) +
ylab("Elevación (msnm)") +
xlab("Distancia") +
theme_minimal() +
theme(legend.position = "NULL")
colores <- brewer.pal(n = 9, name = "Paired")
leaflet(width = '100%') %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles(providers$OpenTopoMap) %>% ## uso mapa topografico
addCircleMarkers(data = tramo1sp, radius = 1, col = colorFactor(colores[1]), group="Tramo 1") %>%
addCircleMarkers(data = tramo2sp, radius = 1, col = colores[2], group="Tramo 2") %>%
addCircleMarkers(data = tramo3sp, radius = 1, col = colores[3], group="Tramo 3") %>%
addCircleMarkers(data = tramo4sp, radius = 1, col = colores[4], group="Tramo 4") %>%
addCircleMarkers(data = tramo5sp, radius = 1, col = colores[5], group="Tramo 5") %>%
addCircleMarkers(data = tramo6sp, radius = 1, col = colores[6], group="Tramo 6") %>%
addCircleMarkers(data = tramo7sp, radius = 1, col = colores[7], group="Tramo 7") %>%
addCircleMarkers(data = tramo8sp, radius = 1, col = colores[8], group="Tramo 8") %>%
addCircleMarkers(data = tramo9sp, radius = 1, col = colores[9], group="Tramo 9") %>%
addCircleMarkers(data = hitossp, radius = 5, col = "red", popup = hitossp$V4) %>%
addLayersControl(
overlayGroups =c("Tramo 1", "Tramo 2", "Tramo 3", "Tramo 4", "Tramo 5", "Tramo 6", "Tramo 7", "Tramo 8", "Tramo 9"),
options = layersControlOptions(collapsed=TRUE)
)
ggplot() +
geom_rect(data=PCSdf, aes(xmin=xmin, xmax = xmax, ymin = -Inf, ymax = Inf, fill=fill), alpha = 0.5) +
geom_line(data =ruta_strm, aes(distance, ele)) +
ylab("Elevación (msnm)") +
xlab("Distancia") +
theme_minimal() +
theme(legend.position = "NULL")
ggplot() +
geom_rect(data=PCSdf, aes(xmin=xmin, xmax = xmax, ymin = -Inf, ymax = Inf),fill=fill, alpha = 0.5) +
geom_line(data =ruta_strm, aes(distance, ele)) +
ylab("Elevación (msnm)") +
xlab("Distancia") +
theme_minimal() +
theme(legend.position = "NULL")
ggplot() +
geom_rect(data=PCSdf, aes(xmin=xmin, xmax = xmax, ymin = -Inf, ymax = Inf), fill=fill, alpha = 0.5) +
geom_line(data =ruta_strm, aes(distance, ele)) +
ylab("Elevación (msnm)") +
xlab("Distancia") +
theme_minimal() +
theme(legend.position = "NULL")
ggplot() +
geom_rect(data=PCSdf, aes(xmin=xmin, xmax = xmax, ymin = -Inf, ymax = Inf), alpha = 0.5) +
geom_line(data =ruta_strm, aes(distance, ele)) +
ylab("Elevación (msnm)") +
xlab("Distancia") +
theme_minimal() +
theme(legend.position = "NULL")
ggplot() +
geom_rect(data=PCSdf, aes(xmin=xmin, xmax = xmax, ymin = -Inf, ymax = Inf, fill=fill),col=colores, alpha = 0.5) +
geom_line(data =ruta_strm, aes(distance, ele)) +
ylab("Elevación (msnm)") +
xlab("Distancia") +
theme_minimal() +
theme(legend.position = "NULL")
ggplot() +
geom_rect(data=PCSdf, aes(xmin=xmin, xmax = xmax, ymin = -Inf, ymax = Inf, fill=fill),fill=colores, alpha = 0.5) +
geom_line(data =ruta_strm, aes(distance, ele)) +
ylab("Elevación (msnm)") +
xlab("Distancia") +
theme_minimal() +
theme(legend.position = "NULL")
ggplot() +
geom_rect(data=PCSdf, aes(xmin=xmin, xmax = xmax, ymin = -Inf, ymax = Inf),fill=colores, alpha = 0.5) +
geom_line(data =ruta_strm, aes(distance, ele)) +
ylab("Elevación (msnm)") +
xlab("Distancia") +
theme_minimal() +
theme(legend.position = "NULL")
leaflet(width = '100%') %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles(providers$OpenTopoMap) %>% ## uso mapa topografico
addCircleMarkers(data = tramo1sp, radius = 1, col = colores[1], group="Tramo 1") %>%
addCircleMarkers(data = tramo2sp, radius = 1, col = colores[2], group="Tramo 2") %>%
addCircleMarkers(data = tramo3sp, radius = 1, col = colores[3], group="Tramo 3") %>%
addCircleMarkers(data = tramo4sp, radius = 1, col = colores[4], group="Tramo 4") %>%
addCircleMarkers(data = tramo5sp, radius = 1, col = colores[5], group="Tramo 5") %>%
addCircleMarkers(data = tramo6sp, radius = 1, col = colores[6], group="Tramo 6") %>%
addCircleMarkers(data = tramo7sp, radius = 1, col = colores[7], group="Tramo 7") %>%
addCircleMarkers(data = tramo8sp, radius = 1, col = colores[8], group="Tramo 8") %>%
addCircleMarkers(data = tramo9sp, radius = 1, col = colores[9], group="Tramo 9") %>%
addCircleMarkers(data = hitossp, radius = 5, col = "red", popup = hitossp$V4) %>%
addLayersControl(
overlayGroups =c("Tramo 1", "Tramo 2", "Tramo 3", "Tramo 4", "Tramo 5", "Tramo 6", "Tramo 7", "Tramo 8", "Tramo 9"),
options = layersControlOptions(collapsed=TRUE)
)
ggplot() +
geom_rect(data=PCSdf, aes(xmin=xmin, xmax = xmax, ymin = -Inf, ymax = Inf),fill=colores, alpha = 0.8) +
geom_line(data =ruta_strm, aes(distance, ele)) +
ylab("Elevación (msnm)") +
xlab("Distancia") +
theme_minimal() +
theme(legend.position = "NULL")
```{r, echo=FALSE, fig.asp = .62}}
```{r, echo=FALSE,fig.width = 5, fig.asp = .62}}
PCSdf <- data.frame("xmin"=c(0,PCS[-9]), "xmax"=PCS, "fill" = colores)
ggplot() +
geom_rect(data=PCSdf, aes(xmin=xmin, xmax = xmax, ymin = -Inf, ymax = Inf),fill=colores, alpha = 0.8) +
geom_line(data =ruta_strm, aes(distance, ele)) +
ylab("Elevación (msnm)") +
xlab("Distancia") +
theme_minimal() +
theme(legend.position = "NULL")
```{r, fig.width = 5, fig.asp = .62,  echo=FALSE,}
```{r, fig.width = 5, fig.asp = .62,  echo=FALSE}
PCSdf <- data.frame("xmin"=c(0,PCS[-9]), "xmax"=PCS, "fill" = colores)
library(GPStream)
library(sp)
library(sp)
library(leaflet)
library(RColorBrewer)
ruta_strm <-
read_stream_file("cajon_del_mapocho.gpx") %>%
rename_stream() %>%
differential_stream()
ruta_strm <-
read_stream("cajon_del_mapocho.gpx") %>%
rename_stream() %>%
differential_stream()
remotes::install_github("raimun2/GPStream")
detach("package:GPStream", unload = TRUE)
remotes::install_github("raimun2/GPStream")
library(GPStream)
#' Load GPS streams from a single gpx or fit file and stores it in a Tibble
#' Allows to process files from Strava's bulk export, which includes compressed fit files (*.fit.gz)
#' @param filename The file path to the directory containing file
#' read_stream_file()
#'
#' @return
#' @export
#'
read_stream_file <- function(filename){
# if file ends in "*fit.gz", then unzip it, maintaining the original file
if(length(grep(".fit.gz",filename))>0)
{
R.utils::gunzip(filename,remove=FALSE, overwrite=TRUE)
filename <- gsub(".gz$","",filename) # remove ".gz" from filename
}
# if fit file (including uncompressed file) use FITfileR library
if(length(grep(".fit$",filename))>0){
file_data <- FITfileR::readFitFile(filename)
stream_df <- FITfileR::records(file_data)
stream_df$timestamp <- lubridate::as_datetime(stream_df$timestamp) #parse datetime
} else if(grep(".gpx$",filename)==1) { # if gpx file use plotKML library
file_data <- plotKML::readGPX(filename)
stream_df <- tibble::as_tibble(file_data$tracks[[1]][[1]])
stream_df$ele <- as.numeric(stream_df$ele) #parse elevation as numeric
stream_df$time <- lubridate::as_datetime(stream_df$time) #parse datetime
} else{
message("unsupported format")
}
return(stream_df) #return tibble with file stream
}
#' Title
#'
#' @param data dataframe or tibble containing a GPS stream
#'
#' @return
#' @export
#'
differential_stream <- function(data){
# previous lon / lat
data$point2_lat = c(0,data$lat[-nrow(data)])
data$point2_lon = c(0,data$lon[-nrow(data)])
# haversise distance between each point and previous one
data$delta_distance = geosphere::distHaversine(cbind(data$lon,data$lat),
cbind(data$point2_lon,data$point2_lat))
data$delta_distance[1] = 0
## 3d distance tambien
# calculate cumulative distance in kms
data$distance <- cumsum(data$delta_distance) / 1000
data$delta_ele <- c(0,diff(data$ele,lag=1))
data$delta_ele[1] <- 0
data$dplus <- ifelse(data$delta_ele>0, data$delta_ele, 0)
data$dminus <- ifelse(data$delta_ele<0, data$delta_ele, 0)
# 2 point previous
data$point3_lat = c(0,data$point2_lat[-nrow(data)])
data$point3_lon = c(0,data$point2_lon[-nrow(data)])
vector1 <- cbind(data$lon-data$point2_lon, data$lat-data$point2_lat)
vector2 <- cbind(data$point3_lon-data$point2_lon,data$point3_lat-data$point2_lat)
num <- vector1[,1]*vector2[,1] + vector1[,2]*vector2[,2]
den <- sqrt(vector1[,1]^2 + vector1[,2]^2)*sqrt(vector2[,1]^2 + vector2[,2]^2)
data$angle <- ifelse(den == 0, 180, (360*acos(num/den))/(2*pi) )
data$point2_lat = NULL
data$point2_lon = NULL
data$point3_lat = NULL
data$point3_lon = NULL
data$grade = ( data$delta_ele / data$delta_distance )
data$grade[1] = 0
data[data$delta_distance == 0,]$grade = 0
if(!is.null(data$time)){
# calculate difference in time and elevation between readings
data$delta_time = c(0,diff(data$time,lag=1))
data$delta_time[1] = 0
# calculate derivatives: vertical and horizontal velocity, in meters per second
data$vert_velocity = data$delta_ele / data$delta_time
data$vert_velocity[1] = 0
data$hz_velocity = data$delta_distance / data$delta_time
data$hz_velocity[1] = 0
#3d velocity
data$velocity <- sqrt(data$vert_velocity^2 + data$hz_velocity^2)
# calculate pace in minutes per kilometer
data$pace <- c(0,1000/60/data$hz_velocity[-1])
}
# return enriched dataset
return(data)
}
install.packages("gdalUtils")
library(sp)
p = Polygon(coords = matrix(c(1,2,2,1,1,1,1,2,2,1), ncol = 2))
p1= Polygons(list(p), ID=1)
p2=SpatialPolygons(list(p1))
p3=SpatialPolygonsDataFrame(p2, data = as.data.frame("1"))
library(rgdal)
library(gdalUtils)
writeOGR(p3, dsn = "square1", layer = "entities", driver="GMT")  #layer MUST be entities and final GMT is then called entities
writeOGR(p3, dsn = "square1", layer = "entities", driver="DXF")  #layer MUST be entities and final GMT is then called entities
library(RPostgreSQL)
writeOGR(p3, dsn = "square1", layer = "entities", driver="GMT")  #layer MUST be entities and final GMT is then called entities
library(GPStream)
library(sp)
library(tidyverse)
library(tidyverse)
library(RColorBrewer)
ruta_strm <-
read_stream_file("cajon_del_mapocho.gpx") %>%
rename_stream() %>%
differential_stream()
con <- dbConnect("PostgreSQL",
dbname = "human-power",
host = "studio-db.datalized.io",
port = 5432,
user = "rsanchez",
password = "QHo3Fpt&345zMh")
librerias = c("jsonlite", "geosphere", "RPostgreSQL", "plyr", "tidyverse", "dplyr", "googlesheets4", "googlesheets","lubridate")
lapply(librerias, library, character.only=T)
#### Crear la conexion con la base de datos
con <- dbConnect("PostgreSQL",
dbname = "human-power",
host = "studio-db.datalized.io",
port = 5432,
user = "rsanchez",
password = "QHo3Fpt&345zMh")
delta_actividades <<- dbGetQuery(con, paste0("SELECT *
from challenge_activity"))
####################################
########    DATA ACTIVIDADES  ######
####################################
### ordeno dataframe con actividades
act_data = NULL
for(i in 1:nrow(delta_actividades))
{
acti <- delta_actividades[i,]
actijson <- jsonlite::fromJSON(acti$json_data)
actijson$map = actijson$map$polyline
actijson$laps = NULL
actijson$gear = NULL
actijson$photos = NULL
actijson$athlete = actijson$athlete$id
actijson$splits_metric = NULL
actijson$splits_standard = NULL
actijson$segment_efforts = NULL
actijson$available_zones = NULL
actijson$best_efforts = NULL
actijson$similar_activities = NULL
act_data = dplyr::bind_rows(act_data,
as.data.frame(t(unlist(actijson))))
}
for(i in 158817:nrow(delta_actividades))
{
acti <- delta_actividades[i,]
actijson <- jsonlite::fromJSON(acti$json_data)
actijson$map = actijson$map$polyline
actijson$laps = NULL
actijson$gear = NULL
actijson$photos = NULL
actijson$athlete = actijson$athlete$id
actijson$splits_metric = NULL
actijson$splits_standard = NULL
actijson$segment_efforts = NULL
actijson$available_zones = NULL
actijson$best_efforts = NULL
actijson$similar_activities = NULL
act_data = dplyr::bind_rows(act_data,
as.data.frame(t(unlist(actijson))))
}
for(i in 180500:nrow(delta_actividades))
{
acti <- delta_actividades[i,]
actijson <- jsonlite::fromJSON(acti$json_data)
actijson$map = actijson$map$polyline
actijson$laps = NULL
actijson$gear = NULL
actijson$photos = NULL
actijson$athlete = actijson$athlete$id
actijson$splits_metric = NULL
actijson$splits_standard = NULL
actijson$segment_efforts = NULL
actijson$available_zones = NULL
actijson$best_efforts = NULL
actijson$similar_activities = NULL
act_data = dplyr::bind_rows(act_data,
as.data.frame(t(unlist(actijson))))
}
write_rds(act_data, "act_data.rds")
for(i in 189139:nrow(delta_actividades))
{
acti <- delta_actividades[i,]
actijson <- jsonlite::fromJSON(acti$json_data)
actijson$map = actijson$map$polyline
actijson$laps = NULL
actijson$gear = NULL
actijson$photos = NULL
actijson$athlete = actijson$athlete$id
actijson$splits_metric = NULL
actijson$splits_standard = NULL
actijson$segment_efforts = NULL
actijson$available_zones = NULL
actijson$best_efforts = NULL
actijson$similar_activities = NULL
act_data = dplyr::bind_rows(act_data,
as.data.frame(t(unlist(actijson))))
}
for(i in 265744:nrow(delta_actividades))  {
acti <- delta_actividades[i,]
actijson <- jsonlite::fromJSON(acti$json_data)
actijson$map = actijson$map$polyline
actijson$laps = NULL
actijson$gear = NULL
actijson$photos = NULL
actijson$athlete = actijson$athlete$id
actijson$splits_metric = NULL
actijson$splits_standard = NULL
actijson$segment_efforts = NULL
actijson$available_zones = NULL
actijson$best_efforts = NULL
actijson$similar_activities = NULL
act_data = dplyr::bind_rows(act_data,
as.data.frame(t(unlist(actijson))))
}
act_data$user_id = delta_actividades$user_id
act_data$start_date = as_datetime(act_data$start_date)
act_data$start_date_local = as_datetime(act_data$start_date_local)
act_data$calories = as.numeric(act_data$calories)
act_data$moving_time = as.numeric(act_data$moving_time)
act_data$elapsed_time = as.numeric(act_data$elapsed_time)
act_data$distance = as.numeric(act_data$distance)
act_data$total_elevation_gain = as.numeric(act_data$total_elevation_gain)
act_data$fecha = as.Date(act_data$start_date)
act_data$semana = round_date(act_data$start_date_local, unit = "week")
write_rds(act_data, "act_data.rds")
library(DT)
library(googlesheets4)
tabla_dist <- read_sheet("https://docs.google.com/spreadsheets/d/1gXVkYR1aznKo8HUoBd68Rq8AHgwLSCYWH52IdPTPYsg/edit#gid=780868077")
tabla_dist <- read_sheet("https://docs.google.com/spreadsheets/d/1gXVkYR1aznKo8HUoBd68Rq8AHgwLSCYWH52IdPTPYsg/edit?usp=sharing")
View(tabla_dist)
tabla_dist <- read_sheet("https://docs.google.com/spreadsheets/d/1gXVkYR1aznKo8HUoBd68Rq8AHgwLSCYWH52IdPTPYsg/edit?usp=sharing")
View(tabla_dist)
tabla_dist[is.na(tabla_dist)]
tabla_dist[is.na(tabla_dist)] <- 0
#https://www.strava.com/routes/2762818189864795836
datatable(tabla_dist, rownames = FALSE, filter="top", options = list(pageLength = 5, scrollX=T) )
#https://www.strava.com/routes/2762818189864795836
datatable(tabla_dist, rownames = FALSE, filter="top", options = list(pageLength = 11, scrollX=F) )
#https://www.strava.com/routes/2762818189864795836
datatable(tabla_dist, rownames = FALSE, filter="none", options = list(pageLength = 11, scrollX=F) )
? datatable
#https://www.strava.com/routes/2762818189864795836
datatable(tabla_dist, rownames = FALSE, filter="none", options = list(pageLength = 11, scrollX=F, searching=F) )
#https://www.strava.com/routes/2762818189864795836
datatable(tabla_dist, rownames = FALSE, filter="none", options = list(pageLength = 11, scrollX=F, searching=F, info=F) )
#https://www.strava.com/routes/2762818189864795836
datatable(tabla_dist, rownames = FALSE, filter="none", options = list(pageLength = 11, scrollX=F, searching=F, ordering=F) )
#https://www.strava.com/routes/2762818189864795836
datatable(tabla_dist, rownames = FALSE, filter="none", options = list(pageLength = 11, scrollX=F, searching=F, ordering=F, lengthChange = F) )
View(tabla_dist)
tabla_dist <- read_sheet("https://docs.google.com/spreadsheets/d/1gXVkYR1aznKo8HUoBd68Rq8AHgwLSCYWH52IdPTPYsg/edit?usp=sharing")
tabla_dist <- read_sheet("https://docs.google.com/spreadsheets/d/1gXVkYR1aznKo8HUoBd68Rq8AHgwLSCYWH52IdPTPYsg/edit?usp=sharing")
#https://www.strava.com/routes/2762818189864795836
datatable(tabla_dist, rownames = FALSE, filter="none", options = list(pageLength = 11, scrollX=F, searching=F, ordering=F, lengthChange = F) )
View(tabla_dist)
View(tabla_dist)
tabla_dist$`Tiempo 2020`
hms(tabla_dist$`Tiempo 2020`)
class(tabla_dist$`Tiempo 2020`)
as.character(tabla_dist$`Tiempo 2020`)
substr(as.character(tabla_dist$`Tiempo 2020`),13,22)
substr(as.character(tabla_dist$`Tiempo 2020`),12,22)
tabla_dist$`Tiempo 2020` <- substr(as.character(tabla_dist$`Tiempo 2020`),12,22)
#https://www.strava.com/routes/2762818189864795836
datatable(tabla_dist, rownames = FALSE, filter="none", options = list(pageLength = 11, scrollX=F, searching=F, ordering=F, lengthChange = F) )
```{r, echo = FALSE, warning=FALSE}
library(DT)
library(DT)
library(googlesheets4)
tabla_dist <- read_sheet("https://docs.google.com/spreadsheets/d/1gXVkYR1aznKo8HUoBd68Rq8AHgwLSCYWH52IdPTPYsg/edit?usp=sharing")
tabla_dist$`Tiempo 2020` <- substr(as.character(tabla_dist$`Tiempo 2020`),12,22)
#https://www.strava.com/routes/2762818189864795836
datatable(tabla_dist, rownames = FALSE, filter="none", options = list(pageLength = 11, scrollX=F, searching=F, ordering=F, lengthChange = F) )
tabla_dist <- read_sheet("https://docs.google.com/spreadsheets/d/1gXVkYR1aznKo8HUoBd68Rq8AHgwLSCYWH52IdPTPYsg/edit?usp=sharing")
tabla_dist <- read_sheet("https://docs.google.com/spreadsheets/d/1gXVkYR1aznKo8HUoBd68Rq8AHgwLSCYWH52IdPTPYsg/edit?usp=sharing")
#https://www.strava.com/routes/2762818189864795836
datatable(tabla_dist, rownames = FALSE, filter="none",
options = list(pageLength = 11, scrollX=F, searching=F, ordering=F, lengthChange = F) ) %>%
formatPercentage(c(`% Distancia acumulada`, `% Desnivel Acumulado`, `% Distancia Eq acumulada`), 2)
tabla_dist <- read_sheet("https://docs.google.com/spreadsheets/d/1gXVkYR1aznKo8HUoBd68Rq8AHgwLSCYWH52IdPTPYsg/edit?usp=sharing")
#https://www.strava.com/routes/2762818189864795836
datatable(tabla_dist, rownames = FALSE, filter="none",
options = list(pageLength = 11, scrollX=F, searching=F, ordering=F, lengthChange = F) ) %>%
formatPercentage(c(`% Distancia acumulada`, `% Desnivel Acumulado`, `% Distancia Eq acumulada`), 2)
#https://www.strava.com/routes/2762818189864795836
datatable(tabla_dist, rownames = FALSE, filter="none",
options = list(pageLength = 11, scrollX=F, searching=F, ordering=F, lengthChange = F) ) %>%
formatPercentage(c("% Distancia acumulada", `% Desnivel Acumulado`, `% Distancia Eq acumulada`), 2)
#https://www.strava.com/routes/2762818189864795836
datatable(tabla_dist, rownames = FALSE, filter="none",
options = list(pageLength = 11, scrollX=F, searching=F, ordering=F, lengthChange = F) ) %>%
formatPercentage(c("% Distancia acumulada", "% Desnivel Acumulado", "% Distancia Eq acumulada"), 2)
#https://www.strava.com/routes/2762818189864795836
datatable(tabla_dist, rownames = FALSE, filter="none",
options = list(pageLength = 11, scrollX=F, searching=F, ordering=F, lengthChange = F) ) %>%
formatPercentage(c("% Distancia acumulada", "% Desnivel Acumulado", "% Distancia Eq acumulada"), 1)
#https://www.strava.com/routes/2762818189864795836
datatable(tabla_dist, rownames = FALSE, filter="none",
options = list(pageLength = 11, scrollX=F, searching=F, ordering=F, lengthChange = F) ) %>%
formatPercentage(c("% Distancia acumulada", "% Desnivel Acumulado", "% Distancia Eq acumulada"), 0)
